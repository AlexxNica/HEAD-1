// Generated by gencpp from file room_luminance/Luminance.msg
// DO NOT EDIT!


#ifndef ROOM_LUMINANCE_MESSAGE_LUMINANCE_H
#define ROOM_LUMINANCE_MESSAGE_LUMINANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace room_luminance
{
template <class ContainerAllocator>
struct Luminance_
{
  typedef Luminance_<ContainerAllocator> Type;

  Luminance_()
    : covered(0)
    , sudden_change(0)
    , room_light()
    , value(0.0)
    , perc_covered(0.0)  {
    }
  Luminance_(const ContainerAllocator& _alloc)
    : covered(0)
    , sudden_change(0)
    , room_light(_alloc)
    , value(0.0)
    , perc_covered(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _covered_type;
  _covered_type covered;

   typedef int8_t _sudden_change_type;
  _sudden_change_type sudden_change;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _room_light_type;
  _room_light_type room_light;

   typedef float _value_type;
  _value_type value;

   typedef float _perc_covered_type;
  _perc_covered_type perc_covered;




  typedef boost::shared_ptr< ::room_luminance::Luminance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::room_luminance::Luminance_<ContainerAllocator> const> ConstPtr;

}; // struct Luminance_

typedef ::room_luminance::Luminance_<std::allocator<void> > Luminance;

typedef boost::shared_ptr< ::room_luminance::Luminance > LuminancePtr;
typedef boost::shared_ptr< ::room_luminance::Luminance const> LuminanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::room_luminance::Luminance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::room_luminance::Luminance_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace room_luminance

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'room_luminance': ['/home/icog-labs/hansonrobotics/HEAD/src/vision/room_luminance/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::room_luminance::Luminance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::room_luminance::Luminance_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::room_luminance::Luminance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::room_luminance::Luminance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::room_luminance::Luminance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::room_luminance::Luminance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::room_luminance::Luminance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "808071152779e2b1174c938d5216ce43";
  }

  static const char* value(const ::room_luminance::Luminance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x808071152779e2b1ULL;
  static const uint64_t static_value2 = 0x174c938d5216ce43ULL;
};

template<class ContainerAllocator>
struct DataType< ::room_luminance::Luminance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "room_luminance/Luminance";
  }

  static const char* value(const ::room_luminance::Luminance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::room_luminance::Luminance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 covered\n\
int8 sudden_change\n\
string room_light\n\
float32 value\n\
float32 perc_covered\n\
";
  }

  static const char* value(const ::room_luminance::Luminance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::room_luminance::Luminance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.covered);
      stream.next(m.sudden_change);
      stream.next(m.room_light);
      stream.next(m.value);
      stream.next(m.perc_covered);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Luminance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::room_luminance::Luminance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::room_luminance::Luminance_<ContainerAllocator>& v)
  {
    s << indent << "covered: ";
    Printer<int8_t>::stream(s, indent + "  ", v.covered);
    s << indent << "sudden_change: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sudden_change);
    s << indent << "room_light: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.room_light);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "perc_covered: ";
    Printer<float>::stream(s, indent + "  ", v.perc_covered);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROOM_LUMINANCE_MESSAGE_LUMINANCE_H
