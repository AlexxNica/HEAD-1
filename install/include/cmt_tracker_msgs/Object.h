// Generated by gencpp from file cmt_tracker_msgs/Object.msg
// DO NOT EDIT!


#ifndef CMT_TRACKER_MSGS_MESSAGE_OBJECT_H
#define CMT_TRACKER_MSGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/RegionOfInterest.h>
#include <std_msgs/Int32.h>
#include <std_msgs/String.h>
#include <std_msgs/Float64.h>
#include <opencv_apps/Point2DArray.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/String.h>

namespace cmt_tracker_msgs
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : header()
    , object()
    , id()
    , obj_states()
    , obj_accuracy()
    , feature_point()
    , pose()
    , tool_used_for_detection()  {
    }
  Object_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object(_alloc)
    , id(_alloc)
    , obj_states(_alloc)
    , obj_accuracy(_alloc)
    , feature_point(_alloc)
    , pose(_alloc)
    , tool_used_for_detection(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _object_type;
  _object_type object;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _obj_states_type;
  _obj_states_type obj_states;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_accuracy_type;
  _obj_accuracy_type obj_accuracy;

   typedef  ::opencv_apps::Point2DArray_<ContainerAllocator>  _feature_point_type;
  _feature_point_type feature_point;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::std_msgs::String_<ContainerAllocator>  _tool_used_for_detection_type;
  _tool_used_for_detection_type tool_used_for_detection;




  typedef boost::shared_ptr< ::cmt_tracker_msgs::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cmt_tracker_msgs::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::cmt_tracker_msgs::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::cmt_tracker_msgs::Object > ObjectPtr;
typedef boost::shared_ptr< ::cmt_tracker_msgs::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cmt_tracker_msgs::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cmt_tracker_msgs::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cmt_tracker_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'opencv_apps': ['/opt/ros/indigo/share/opencv_apps/cmake/../msg'], 'cmt_tracker_msgs': ['/home/icog-labs/hansonrobotics/HEAD/src/vision/cmt_tracker_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cmt_tracker_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cmt_tracker_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cmt_tracker_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "232560d9417be3244e13955b54eafc19";
  }

  static const char* value(const ::cmt_tracker_msgs::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x232560d9417be324ULL;
  static const uint64_t static_value2 = 0x4e13955b54eafc19ULL;
};

template<class ContainerAllocator>
struct DataType< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cmt_tracker_msgs/Object";
  }

  static const char* value(const ::cmt_tracker_msgs::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
sensor_msgs/RegionOfInterest object\n\
std_msgs/Int32 id\n\
std_msgs/String obj_states\n\
std_msgs/Float64 obj_accuracy\n\
opencv_apps/Point2DArray feature_point\n\
geometry_msgs/Pose pose\n\
std_msgs/String tool_used_for_detection\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
================================================================================\n\
MSG: opencv_apps/Point2DArray\n\
Point2D[] points\n\
\n\
================================================================================\n\
MSG: opencv_apps/Point2D\n\
float64 x\n\
float64 y\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::cmt_tracker_msgs::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object);
      stream.next(m.id);
      stream.next(m.obj_states);
      stream.next(m.obj_accuracy);
      stream.next(m.feature_point);
      stream.next(m.pose);
      stream.next(m.tool_used_for_detection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cmt_tracker_msgs::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cmt_tracker_msgs::Object_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object: ";
    s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "obj_states: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_states);
    s << indent << "obj_accuracy: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_accuracy);
    s << indent << "feature_point: ";
    s << std::endl;
    Printer< ::opencv_apps::Point2DArray_<ContainerAllocator> >::stream(s, indent + "  ", v.feature_point);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "tool_used_for_detection: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.tool_used_for_detection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CMT_TRACKER_MSGS_MESSAGE_OBJECT_H
