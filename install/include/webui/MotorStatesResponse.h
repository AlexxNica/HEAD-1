// Generated by gencpp from file webui/MotorStatesResponse.msg
// DO NOT EDIT!


#ifndef WEBUI_MESSAGE_MOTORSTATESRESPONSE_H
#define WEBUI_MESSAGE_MOTORSTATESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace webui
{
template <class ContainerAllocator>
struct MotorStatesResponse_
{
  typedef MotorStatesResponse_<ContainerAllocator> Type;

  MotorStatesResponse_()
    : motors()
    , angles()
    , loads()
    , temperatures()
    , errors()  {
    }
  MotorStatesResponse_(const ContainerAllocator& _alloc)
    : motors(_alloc)
    , angles(_alloc)
    , loads(_alloc)
    , temperatures(_alloc)
    , errors(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _motors_type;
  _motors_type motors;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _loads_type;
  _loads_type loads;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _temperatures_type;
  _temperatures_type temperatures;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _errors_type;
  _errors_type errors;




  typedef boost::shared_ptr< ::webui::MotorStatesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::webui::MotorStatesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatesResponse_

typedef ::webui::MotorStatesResponse_<std::allocator<void> > MotorStatesResponse;

typedef boost::shared_ptr< ::webui::MotorStatesResponse > MotorStatesResponsePtr;
typedef boost::shared_ptr< ::webui::MotorStatesResponse const> MotorStatesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::webui::MotorStatesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::webui::MotorStatesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace webui

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::webui::MotorStatesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::webui::MotorStatesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webui::MotorStatesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webui::MotorStatesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webui::MotorStatesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webui::MotorStatesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::webui::MotorStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f2ab127d4c72388212187489e68122d";
  }

  static const char* value(const ::webui::MotorStatesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f2ab127d4c72388ULL;
  static const uint64_t static_value2 = 0x212187489e68122dULL;
};

template<class ContainerAllocator>
struct DataType< ::webui::MotorStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "webui/MotorStatesResponse";
  }

  static const char* value(const ::webui::MotorStatesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::webui::MotorStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] motors\n\
float32[] angles\n\
float64[] loads\n\
int32[] temperatures\n\
int32[] errors\n\
\n\
";
  }

  static const char* value(const ::webui::MotorStatesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::webui::MotorStatesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motors);
      stream.next(m.angles);
      stream.next(m.loads);
      stream.next(m.temperatures);
      stream.next(m.errors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorStatesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::webui::MotorStatesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::webui::MotorStatesResponse_<ContainerAllocator>& v)
  {
    s << indent << "motors[]" << std::endl;
    for (size_t i = 0; i < v.motors.size(); ++i)
    {
      s << indent << "  motors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motors[i]);
    }
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "loads[]" << std::endl;
    for (size_t i = 0; i < v.loads.size(); ++i)
    {
      s << indent << "  loads[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.loads[i]);
    }
    s << indent << "temperatures[]" << std::endl;
    for (size_t i = 0; i < v.temperatures.size(); ++i)
    {
      s << indent << "  temperatures[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.temperatures[i]);
    }
    s << indent << "errors[]" << std::endl;
    for (size_t i = 0; i < v.errors.size(); ++i)
    {
      s << indent << "  errors[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.errors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEBUI_MESSAGE_MOTORSTATESRESPONSE_H
