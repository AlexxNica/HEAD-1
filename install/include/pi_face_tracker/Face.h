// Generated by gencpp from file pi_face_tracker/Face.msg
// DO NOT EDIT!


#ifndef PI_FACE_TRACKER_MESSAGE_FACE_H
#define PI_FACE_TRACKER_MESSAGE_FACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace pi_face_tracker
{
template <class ContainerAllocator>
struct Face_
{
  typedef Face_<ContainerAllocator> Type;

  Face_()
    : id(0)
    , point()
    , attention(0.0)
    , emotion_value(0)
    , emotion_id()
    , temp_id(false)
    , recognized(false)
    , recognized_as()  {
    }
  Face_(const ContainerAllocator& _alloc)
    : id(0)
    , point(_alloc)
    , attention(0.0)
    , emotion_value(0)
    , emotion_id(_alloc)
    , temp_id(false)
    , recognized(false)
    , recognized_as(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef float _attention_type;
  _attention_type attention;

   typedef int32_t _emotion_value_type;
  _emotion_value_type emotion_value;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emotion_id_type;
  _emotion_id_type emotion_id;

   typedef uint8_t _temp_id_type;
  _temp_id_type temp_id;

   typedef uint8_t _recognized_type;
  _recognized_type recognized;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _recognized_as_type;
  _recognized_as_type recognized_as;




  typedef boost::shared_ptr< ::pi_face_tracker::Face_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_face_tracker::Face_<ContainerAllocator> const> ConstPtr;

}; // struct Face_

typedef ::pi_face_tracker::Face_<std::allocator<void> > Face;

typedef boost::shared_ptr< ::pi_face_tracker::Face > FacePtr;
typedef boost::shared_ptr< ::pi_face_tracker::Face const> FaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pi_face_tracker::Face_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pi_face_tracker::Face_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pi_face_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'pi_face_tracker': ['/home/icog-labs/hansonrobotics/HEAD/src/vision/pi_vision/pi_face_tracker/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pi_face_tracker::Face_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pi_face_tracker::Face_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_face_tracker::Face_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_face_tracker::Face_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_face_tracker::Face_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_face_tracker::Face_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pi_face_tracker::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30975a4f16de8013c458ec3bdd423421";
  }

  static const char* value(const ::pi_face_tracker::Face_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30975a4f16de8013ULL;
  static const uint64_t static_value2 = 0xc458ec3bdd423421ULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_face_tracker::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pi_face_tracker/Face";
  }

  static const char* value(const ::pi_face_tracker::Face_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pi_face_tracker::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Face in 3D space\n\
int32 id\n\
geometry_msgs/Point point\n\
float32 attention\n\
# Emotion\n\
int32 emotion_value\n\
string emotion_id\n\
#Temporary\n\
bool temp_id\n\
bool recognized\n\
string recognized_as\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::pi_face_tracker::Face_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pi_face_tracker::Face_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.point);
      stream.next(m.attention);
      stream.next(m.emotion_value);
      stream.next(m.emotion_id);
      stream.next(m.temp_id);
      stream.next(m.recognized);
      stream.next(m.recognized_as);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Face_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pi_face_tracker::Face_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pi_face_tracker::Face_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "attention: ";
    Printer<float>::stream(s, indent + "  ", v.attention);
    s << indent << "emotion_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.emotion_value);
    s << indent << "emotion_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emotion_id);
    s << indent << "temp_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_id);
    s << indent << "recognized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recognized);
    s << indent << "recognized_as: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.recognized_as);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PI_FACE_TRACKER_MESSAGE_FACE_H
