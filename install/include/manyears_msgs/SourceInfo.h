// Generated by gencpp from file manyears_msgs/SourceInfo.msg
// DO NOT EDIT!


#ifndef MANYEARS_MSGS_MESSAGE_SOURCEINFO_H
#define MANYEARS_MSGS_MESSAGE_SOURCEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace manyears_msgs
{
template <class ContainerAllocator>
struct SourceInfo_
{
  typedef SourceInfo_<ContainerAllocator> Type;

  SourceInfo_()
    : source_id(0)
    , source_pos()
    , longitude(0.0)
    , latitude(0.0)
    , source_probability(0.0)
    , separation_data()
    , postfiltered_data()  {
    }
  SourceInfo_(const ContainerAllocator& _alloc)
    : source_id(0)
    , source_pos(_alloc)
    , longitude(0.0)
    , latitude(0.0)
    , source_probability(0.0)
    , separation_data(_alloc)
    , postfiltered_data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _source_id_type;
  _source_id_type source_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _source_pos_type;
  _source_pos_type source_pos;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _source_probability_type;
  _source_probability_type source_probability;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _separation_data_type;
  _separation_data_type separation_data;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _postfiltered_data_type;
  _postfiltered_data_type postfiltered_data;




  typedef boost::shared_ptr< ::manyears_msgs::SourceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manyears_msgs::SourceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SourceInfo_

typedef ::manyears_msgs::SourceInfo_<std::allocator<void> > SourceInfo;

typedef boost::shared_ptr< ::manyears_msgs::SourceInfo > SourceInfoPtr;
typedef boost::shared_ptr< ::manyears_msgs::SourceInfo const> SourceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manyears_msgs::SourceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manyears_msgs::SourceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace manyears_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'manyears_msgs': ['/home/icog-labs/hansonrobotics/HEAD/src/sound/manyears_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manyears_msgs::SourceInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manyears_msgs::SourceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manyears_msgs::SourceInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94f909a2797d50c0ca7dbb707ce66302";
  }

  static const char* value(const ::manyears_msgs::SourceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94f909a2797d50c0ULL;
  static const uint64_t static_value2 = 0xca7dbb707ce66302ULL;
};

template<class ContainerAllocator>
struct DataType< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manyears_msgs/SourceInfo";
  }

  static const char* value(const ::manyears_msgs::SourceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Tracked source information\n\
uint32 source_id\n\
geometry_msgs/Point source_pos\n\
float32 longitude   # In degrees\n\
float32 latitude    # In degrees \n\
float32 source_probability\n\
float32[] separation_data # Separation data (audio stream)\n\
float32[] postfiltered_data # Postfiltered data (audio stream)\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::manyears_msgs::SourceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source_id);
      stream.next(m.source_pos);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.source_probability);
      stream.next(m.separation_data);
      stream.next(m.postfiltered_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SourceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manyears_msgs::SourceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manyears_msgs::SourceInfo_<ContainerAllocator>& v)
  {
    s << indent << "source_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.source_id);
    s << indent << "source_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.source_pos);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "source_probability: ";
    Printer<float>::stream(s, indent + "  ", v.source_probability);
    s << indent << "separation_data[]" << std::endl;
    for (size_t i = 0; i < v.separation_data.size(); ++i)
    {
      s << indent << "  separation_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.separation_data[i]);
    }
    s << indent << "postfiltered_data[]" << std::endl;
    for (size_t i = 0; i < v.postfiltered_data.size(); ++i)
    {
      s << indent << "  postfiltered_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.postfiltered_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANYEARS_MSGS_MESSAGE_SOURCEINFO_H
