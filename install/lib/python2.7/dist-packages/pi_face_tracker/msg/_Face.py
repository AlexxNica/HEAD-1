# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pi_face_tracker/Face.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Face(genpy.Message):
  _md5sum = "30975a4f16de8013c458ec3bdd423421"
  _type = "pi_face_tracker/Face"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Face in 3D space
int32 id
geometry_msgs/Point point
float32 attention
# Emotion
int32 emotion_value
string emotion_id
#Temporary
bool temp_id
bool recognized
string recognized_as

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','point','attention','emotion_value','emotion_id','temp_id','recognized','recognized_as']
  _slot_types = ['int32','geometry_msgs/Point','float32','int32','string','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,point,attention,emotion_value,emotion_id,temp_id,recognized,recognized_as

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Face, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.attention is None:
        self.attention = 0.
      if self.emotion_value is None:
        self.emotion_value = 0
      if self.emotion_id is None:
        self.emotion_id = ''
      if self.temp_id is None:
        self.temp_id = False
      if self.recognized is None:
        self.recognized = False
      if self.recognized_as is None:
        self.recognized_as = ''
    else:
      self.id = 0
      self.point = geometry_msgs.msg.Point()
      self.attention = 0.
      self.emotion_value = 0
      self.emotion_id = ''
      self.temp_id = False
      self.recognized = False
      self.recognized_as = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i3dfi.pack(_x.id, _x.point.x, _x.point.y, _x.point.z, _x.attention, _x.emotion_value))
      _x = self.emotion_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B.pack(_x.temp_id, _x.recognized))
      _x = self.recognized_as
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.point.x, _x.point.y, _x.point.z, _x.attention, _x.emotion_value,) = _struct_i3dfi.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion_id = str[start:end].decode('utf-8')
      else:
        self.emotion_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.temp_id, _x.recognized,) = _struct_2B.unpack(str[start:end])
      self.temp_id = bool(self.temp_id)
      self.recognized = bool(self.recognized)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recognized_as = str[start:end].decode('utf-8')
      else:
        self.recognized_as = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i3dfi.pack(_x.id, _x.point.x, _x.point.y, _x.point.z, _x.attention, _x.emotion_value))
      _x = self.emotion_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B.pack(_x.temp_id, _x.recognized))
      _x = self.recognized_as
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.id, _x.point.x, _x.point.y, _x.point.z, _x.attention, _x.emotion_value,) = _struct_i3dfi.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion_id = str[start:end].decode('utf-8')
      else:
        self.emotion_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.temp_id, _x.recognized,) = _struct_2B.unpack(str[start:end])
      self.temp_id = bool(self.temp_id)
      self.recognized = bool(self.recognized)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recognized_as = str[start:end].decode('utf-8')
      else:
        self.recognized_as = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i3dfi = struct.Struct("<i3dfi")
_struct_2B = struct.Struct("<2B")
