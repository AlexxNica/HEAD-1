# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from facial_puppetry/land_marks.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class land_marks(genpy.Message):
  _md5sum = "f6d1fcaa4d346ffd01a06e016371d2ee"
  _type = "facial_puppetry/land_marks"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] dlib_val
float32[] max_ref
float32 distX
float32 distY
float32 distW
float32 distH
"""
  __slots__ = ['dlib_val','max_ref','distX','distY','distW','distH']
  _slot_types = ['float32[]','float32[]','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dlib_val,max_ref,distX,distY,distW,distH

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(land_marks, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.dlib_val is None:
        self.dlib_val = []
      if self.max_ref is None:
        self.max_ref = []
      if self.distX is None:
        self.distX = 0.
      if self.distY is None:
        self.distY = 0.
      if self.distW is None:
        self.distW = 0.
      if self.distH is None:
        self.distH = 0.
    else:
      self.dlib_val = []
      self.max_ref = []
      self.distX = 0.
      self.distY = 0.
      self.distW = 0.
      self.distH = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.dlib_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.dlib_val))
      length = len(self.max_ref)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.max_ref))
      _x = self
      buff.write(_struct_4f.pack(_x.distX, _x.distY, _x.distW, _x.distH))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.dlib_val = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_ref = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.distX, _x.distY, _x.distW, _x.distH,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.dlib_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.dlib_val.tostring())
      length = len(self.max_ref)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.max_ref.tostring())
      _x = self
      buff.write(_struct_4f.pack(_x.distX, _x.distY, _x.distW, _x.distH))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.dlib_val = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 16
      (_x.distX, _x.distY, _x.distW, _x.distH,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
