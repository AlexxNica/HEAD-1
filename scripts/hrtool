#!/usr/bin/env bash
#
# hrtool.sh
#
# This script will setup/build/run Hanson Robotics stack on you machine

set -e

BASEDIR=$(dirname $(readlink -f ${BASH_SOURCE[0]}))

### BEGIN: CONFIGURATIONS ###
HR_VERSION=0.1.2

PROJECT=${PROJECT:-HEAD}
OPENCOG_REPOS=(cogutils atomspace opencog ros-behavior-scripting relex external-tools)
HR_REPOS=($PROJECT)
GITHUB_STORAGE_URL=https://raw.githubusercontent.com/hansonrobotics/binary_dependency/master
declare -A MD5SUMS

DEFAULT_HR_WORKSPACE=~/hansonrobotics
HR_ENVFILE_PATH=~/.hr/env.sh
HR_PREFIX=/opt/hansonrobotics
HR_CACHE=$HOME/.hr/cache
HR_MODELS=$HOME/.hr/models
if [[ -z $APT_CACHE ]]; then
    APT_CACHE=0
fi
if [[ -z $PIP_CACHE ]]; then
    PIP_CACHE=0
fi
APT_CACHE_DIR=$HR_CACHE/archives
PIP_CACHE_DIR=$HR_CACHE/pip
LOG_DIR="$HOME/.hr/log"
VISION_TOOL_PREFIX=$HR_PREFIX/vision
MARKY_MARKOV_DIR=$HR_PREFIX/marky_markov

export PKG_CONFIG_PATH=${HR_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}

# Needed for compiling
export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HR_PREFIX
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HR_PREFIX/lib

export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$HR_PREFIX/include:$INCLUDE_PATH
export LIBRARY_PATH=$LIBRARY_PATH:$HR_PREFIX/lib
export PATH=/usr/lib/ccache:$PATH

ASSUME_YES=0

SUDO=""
if [[ $(id -u) != 0 ]]; then
    SUDO="sudo"
fi

APT_GET_OPTS="-y"
if [[ $APT_CACHE == 1 ]]; then
    APT_GET_OPTS="$APT_GET_OPTS -o dir::cache::archives=$APT_CACHE_DIR"
fi

PIP_OPTS=""
if [[ $PIP_CACHE == 1 ]]; then
    PIP_OPTS="$PIP_OPTS --download-cache $PIP_CACHE_DIR"
fi

### END: CONFIGURATIONS ###

### COMMON FUNCTIONS BEGIN ###
COLOR_INFO='\033[32m'
COLOR_WARN='\033[33m'
COLOR_ERROR='\033[31m'
COLOR_RESET='\033[0m'
if [[ ! -d $LOG_DIR/install ]]; then
    mkdir -p $LOG_DIR/install
fi
timestamp=$(date "+%Y%m%d%H%M%S")
LOG_FILE=$LOG_DIR/install/${timestamp}.log
ln -sf -T $LOG_FILE $LOG_DIR/install/latest.log

info() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    printf "${COLOR_INFO}[INFO] ${timestamp} $*${COLOR_RESET}\n" | tee -a $LOG_FILE
}
warn() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    printf "${COLOR_WARN}[WARN] ${timestamp} $*${COLOR_RESET}\n" | tee -a $LOG_FILE
}
error() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    printf "${COLOR_ERROR}[ERROR] ${timestamp} $*${COLOR_RESET}\n" | tee -a $LOG_FILE
}

md5str() {
  local FNAME=$1
  case $(uname) in
    "Linux")
      echo $(md5sum "$FNAME" | cut -d ' ' -f 1)
      ;;
    "Darwin")
      echo $(md5 -q "$FNAME")
      ;;
  esac
}

checkmd5() {
    local FNAME=$1
    if [[ ! -f $FNAME ]]; then
        error "$FNAME is not a file"
        return 1
    fi
    local EXPECTED=$2
    local ACTUAL=$(md5str "$FNAME")
    if [ $EXPECTED = $ACTUAL ]; then
        info "$FNAME: successfully checked"
        return 0
    else
        error "$FNAME md5sum did not match."
        error "Expected: $EXPECTED"
        error "Actual: $ACTUAL"
        mv ${FNAME} ${FNAME}.old && warn "$FNAME is removed"
        return 1
    fi
}

wget_cache() {
    url=$1
    ofile=${2-${url##*/}}
    info "Downloading $1"
    [[ -f ${HR_CACHE}/${ofile} ]] || wget ${url} -O ${HR_CACHE}/${ofile}

    # check md5sum
    local sum=${MD5SUMS[$ofile]}
    local retry=1
    if [[ ! -z $sum ]]; then
        while (( $retry >= 0 )); do
            if checkmd5 ${HR_CACHE}/${ofile} $sum; then
                break
            fi
            retry=$((retry-1))
            echo $retry
            if (( $retry >= 0 )); then
                wget ${url} -O ${HR_CACHE}/${ofile}
            fi
        done
    fi

    info "Downloading $1 is done"
}

curl_cache() {
    url=$1
    ofile=${2-${url##*/}}
    info "Downloading $1"
    [[ -f ${HR_CACHE}/${ofile} ]] || curl -L ${url} -o ${HR_CACHE}/${ofile}

    # check md5sum
    local sum=${MD5SUMS[$ofile]}
    local retry=1
    if [[ ! -z $sum ]]; then
        while (( $retry >= 0 )); do
            if checkmd5 ${HR_CACHE}/${ofile} $sum; then
                break
            fi
            retry=$((retry-1))
            echo $retry
            if (( $retry >= 0 )); then
                curl -L ${url} -o ${HR_CACHE}/${ofile}
            fi
        done
    fi

    info "Downloading $1 is done"
}

timeit() {
    local start=$(date +%s.%N)
    $@
    local elapsed=$(echo "$(date +%s.%N)-$start" | bc)
    info "Command \"$1\", time used $elapsed"
}

### COMMON FUNCTIONS END ###

check_apt_installed() {
    # Check if the given debian packages are installed
    local pkgs=$@
    local s
    local v
    local ver
    local pkg
    for pkg in $pkgs; do
        if [[ ${pkg} =~ .*"=".* ]]; then
            ver=${pkg##*=}
            pkg=${pkg%=*}
            s=$(dpkg-query -W -f='${db:Status-Abbrev}=${Version}' "$pkg")
            v=${s##*=}
            s=${s%=*}
            if [[ $ver != $v || ${#s} != 3 || ${s:1:1} != 'i' ]]; then
                return 1
            else
                info "$pkg=$ver is already installed"
            fi
        else
            s=$(dpkg-query -W -f='${db:Status-Abbrev}' "$pkg")
            if [[ ${#s} != 3 || ${s:1:1} != 'i' ]]; then
                return 1
            else
                info "$pkg is already installed"
            fi
        fi
    done
}

add_ppa() {
    user=$(echo $1|cut -d: -f2|cut -d/ -f1)
    ppa=$(echo $1|cut -d: -f2|cut -d/ -f2)
    for file in `find /etc/apt/ -name \*.list`; do
        set +e
        item=$(grep -o "^deb http://ppa.launchpad.net/[a-z0-9\-]\+/[a-z0-9\-]\+" $file)
        set -e
        USER=`echo $item | cut -d/ -f4`
        PPA=`echo $item | cut -d/ -f5`
        if [[ $USER == $user && $PPA == $ppa ]]; then
            info "PPA $1 is already added"
            return 0
        fi
    done
    info $SUDO add-apt-repository -y $1
    $SUDO add-apt-repository -y $1
}

apt_get_install() {
    if ! check_apt_installed "$@"; then
        $SUDO apt-get ${APT_GET_OPTS} install "$@" || (
            $SUDO apt-get ${APT_GET_OPTS} update &&
            $SUDO apt-get ${APT_GET_OPTS} install "$@")
    fi
}

install_basic() {
    info "Installing basic dependencies"
    local pkgs=(git wget telnet python3-pip python-pip build-essential
            software-properties-common)
    apt_get_install "${pkgs[@]}"
    info "Installing basic dependencies is done"
}

install_ros() {
    info "Installing ROS"
    $SUDO sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
    $SUDO apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 0xB01FA116
    local pkgs=(
        ros-indigo-desktop
        ros-indigo-tf
        ros-indigo-driver-common
        ros-indigo-cv-bridge
        ros-indigo-image-transport
        ros-indigo-openni-camera
        ros-indigo-mjpeg-server
        ros-indigo-usb-cam
        ros-indigo-dynamixel-motor
        ros-indigo-robot-state-publisher
        ros-indigo-joint-state-publisher
        ros-indigo-rosbridge-server
        python-catkin-tools
    )

    # for camera calibration
    pkgs+=(ros-indigo-image-proc)

    apt_get_install "${pkgs[@]}"

    # for blender to find ros packages
    $SUDO pip3 install ${PIP_OPTS} rospkg catkin_pkg

    if [[ ! -f /etc/ros/rosdep/sources.list.d/20-default.list ]]; then
        $SUDO rosdep init -q
        rosdep update -q
    fi
    info "Installing ROS is done"
}

install_blender() {
    info "Installing blender"
    add_ppa ppa:irie/blender
    apt_get_install blender
    info "Installing blender done"
}

install_ffmpeg() {
    info "Installing ffmpeg"
    # For blender_api_test
    add_ppa ppa:mc3man/trusty-media
    apt_get_install ffmpeg
    info "Installing ffmpeg done"
}

install_other_deps() {
    info "Installing other dependencies"
    local pkgs=()

    # For rosbridge_server
    pkgs+=(python-bson)

    # For pololu-motors
    # DO NOT UPGRADE WITH PIP
    pkgs+=(python-serial)

    # For Blender
    pkgs+=(python3-numpy)

    # For running scripts
    pkgs+=(tmux)

    # For tts playing audio
    pkgs+=(python-pyglet)

    # For chatbot
    pkgs+=(python-yaml)

    # Swig for iflytek SDK
    pkgs+=(swig)

    # For rospy to run with python3
    pkgs+=(python3-yaml)

    # For audio recording
    pkgs+=(pulseaudio python-pyaudio)

    apt_get_install "${pkgs[@]}"

    # For chatbot
    $SUDO pip2 install num2words

    # For Chinese tts
    $SUDO pip2 install ${PIP_OPTS} pinyin==0.2.5

    # For performances
    $SUDO pip2 install transitions

    # For webui
    $SUDO pip2 install ${PIP_OPTS} flask EasyProcess psutil

    info "Installing other dependencies is done"
}

install_test_deps() {
    info "Installing test dependencies"
    apt_get_install socat

    # WebUI compatable webserver
    $SUDO npm install xmlhttprequest --prefix $HR_WORKSPACE/$PROJECT/src/chatbot/scripts
    info "Installing test dependencies is done"
}

install_webui_deps() {
    # Remove npm and nodejs if needed
    # sudo npm uninstall -g npm
    # sudo apt-get remove nodejs

    # See https://github.com/nodesource/distributions#debinstall
    if ! hash nodejs; then
        info "Installing nodejs"
        curl -sL https://deb.nodesource.com/setup_6.x | $SUDO -E bash -
        apt_get_install nodejs
        info "Installing nodejs done"
    fi
    if ! npm ls -g webpack >/dev/null; then
        $SUDO npm install -g webpack
    fi
    if ! npm ls -g nodemon >/dev/null; then
        $SUDO npm install -g nodemon
    fi
}

install_marky_markov() {
    info "Installing Marky Markov"
    if [ ! -d $MARKY_MARKOV_DIR ]; then
      git clone https://github.com/hansonrobotics/marky_markov.git $MARKY_MARKOV_DIR
    else
      warn "Skipping marky_markov clone"
    fi
    MD5SUMS["markov_modeling.tar.gz"]=7d51bbcd4df89b2633bd9520fb99b2b7
    wget_cache $GITHUB_STORAGE_URL/markov_modeling.tar.gz
    [[ ! -d $HR_MODELS ]] && mkdir -p $HR_MODELS
    tar zxf ${HR_CACHE}/markov_modeling.tar.gz -C $HR_MODELS

    add_ppa ppa:brightbox/ruby-ng
    apt_get_install ruby2.3 ruby2.3-dev
    $SUDO gem install marky_markov
    info "Installing Marky Markov is done"
}

get_models() {
    _get_models
}

_get_models() {
    [[ ! -d $HR_MODELS ]] && mkdir -p $HR_MODELS
    local old_dir=${HOME}/.hr/cache/models
    if [[ -d ${old_dir} ]]; then
        for f in ${old_dir}/*; do
            [[ -f "$f" ]] || continue
            if [[ ! -e ${HR_MODELS}/${f##*/} ]]; then
                mv ${f} ${HR_MODELS}/
            fi
        done
    fi

    # markov
    wget_cache https://github.com/opencog/test-datasets/releases/download/current/markov_modeling.tar.gz
    checkmd5 ${HR_CACHE}/markov_modeling.tar.gz 7d51bbcd4df89b2633bd9520fb99b2b7
    tar zxf ${HR_CACHE}/markov_modeling.tar.gz -C $HR_MODELS
}

check_or_create_ws() {
    [[ ! -z $1 ]]
    if [[ ! -d $1 ]]; then
        local confirm
        _get_confirm "The workspace ${1} does not exist, create? [y/N]"
        if [[ ${confirm} -eq 1 ]]; then
            mkdir -p ${1}
            echo "Workspace directory ${1} is created"
        fi
    fi
}

clone() {
    owner=$1
    repo=$2
    dest=${3-"."}/$repo
    # if ssh clone failed, then try https clone
    if [[ -d $dest ]]; then
        info "$dest already exists"
    else
        info "Cloning $repo"
        git clone git@github.com:$owner/$repo.git $dest || git clone https://github.com/$owner/$repo.git $dest
        info "Cloning $repo is done"
    fi
}

do_update_hr() {
    info "Updating HR source code"
    do_migrate

    local DEFAULT_BRANCH="master"
    for repo in ${HR_REPOS[*]}
    do
        cd $HR_WORKSPACE/$repo
        branch=$(git rev-parse --abbrev-ref HEAD)
        if [[ $branch != $DEFAULT_BRANCH ]]; then
            warn "[${repo}] Branch is not (${DEFAULT_BRANCH}) branch (${branch}). Skip."
            continue
        fi
        info "Updating [${repo}]"
        git pull origin $DEFAULT_BRANCH
        info "Updating [${repo}] is done"
    done
    do_update_vision_tools
    info "Updating HR source code is done"
}

do_install_deps() {
    info "Installing dependencies"
    _do_install_deps
    info "Installing dependencies is done"
}

_do_install_deps() {
    if [[ ! -d $HR_PREFIX ]]; then
        info "Creating $HR_PREFIX"
        $SUDO mkdir -p $HR_PREFIX
    fi
    $SUDO chmod 777 $HR_PREFIX
    timeit install_basic
    timeit install_ros
    timeit install_webui_deps
    timeit install_blender
    timeit install_ffmpeg
    timeit install_tts
    timeit install_other_deps
    timeit get_models

    wget_cache https://raw.githubusercontent.com/hansonrobotics/HEAD/master/scripts/patch/rosbridge.patch
    $SUDO patch -N /opt/ros/indigo/lib/python2.7/dist-packages/rosbridge_library/internal/publishers.py ${HR_CACHE}/rosbridge.patch || true
}

do_get_hr_src() {
    info "Cloning HR source code"
    for repo in ${HR_REPOS[*]}
    do
        cd $HR_WORKSPACE
        clone hansonrobotics $repo
    done
    info "Cloning HR source code is done"
}

do_get_src() {
    # Check/add the github host key to ~/.ssh/known_hosts
    ssh -o StrictHostKeyChecking=no github.com || true
    do_get_hr_src
    get_opencog_src
}

do_build_hr() {
    info "Building HR"
    _do_build_hr
    info "Building HR is done"
}

pack_hr() {
    if [[ ! -d makeself ]]; then
        MD5SUMS["makeself-2.2.0.tar.gz"]=8075530b2ad0a2fbd4bffa80a96eb2ea
        wget_cache https://github.com/megastep/makeself/archive/release-2.2.0.tar.gz makeself-2.2.0.tar.gz
        mkdir -p makeself
        tar zxf ${HR_CACHE}/makeself-2.2.0.tar.gz -C makeself --strip-components 1
    fi
    TIME=$(date +%Y%m%d%H%M%S)
    makeself/makeself.sh ${HR_WORKSPACE}/HEAD/install HEAD-${TIME}.run "HEAD" .
    rm -rf makeself
}

_do_build_hr() {
    # build CppMT
    if [[ -d $CPPMT_DIR ]]; then
        cd $CPPMT_DIR
        info "Building CPPMT"
        cmake .
        make -j$(nproc)
    fi

    cd $HR_WORKSPACE/$PROJECT
    source /opt/ros/indigo/setup.bash
    if [[ ! -d .catkin_tools ]]; then
        catkin init
    fi

    catkin config --blacklist icog_face_tracker
    catkin clean -y || catkin clean -a
    catkin build --force-cmake -j$(nproc) --no-status --make-args install
    TARGET=$HR_WORKSPACE/$PROJECT/devel/lib/python2.7/dist-packages/
    pip2 install -t $TARGET $HR_WORKSPACE/$PROJECT/src/hardware/pololu-motors --upgrade --no-deps
    pip3 install -t $TARGET $HR_WORKSPACE/$PROJECT/src/blender_api_msgs --upgrade --no-deps
    cd $HR_WORKSPACE/$PROJECT/src/webui
    npm install
}

do_single_package() {
    cd $HR_WORKSPACE/$PROJECT
    source /opt/ros/indigo/setup.bash
    if [[ ! -d .catkin_tools ]]; then
        catkin init
    fi
    catkin build $1
}

do_test() {
    bash $HR_WORKSPACE/$PROJECT/scripts/test.sh
}

do_update() {
    do_update_hr
}

do_clean_up() {
    info "Cleaning up"
    set +e
    _do_clean_up >/dev/null 2>&1
    set -e
    info "Cleaning up is done"
}

_do_clean_up() {
    rm -r ~/.cache/guile
}

_get_rel_ws() {
    readlink -f ${BASEDIR}/../../
}

_get_confirm() {
    local message="${1:-Are you sure?}"
    local answer
    if [ "$ASSUME_YES" -eq 1 ] ; then
        confirm=1
        return
    fi
    printf '%s ' "$message"
    read -r answer
    ! printf '%s\n' "$answer" | grep -Eq "$(locale yesexpr)"
    confirm=$?
}

check_ws() {
    # Check workspace
    local rel_ws=$(_get_rel_ws)
    local ws=$(readlink -f ${HR_WORKSPACE})
    if [[ $rel_ws != $ws ]]; then
        local confirm
        warn "The workspace configured ${ws} doesn't match the your working path ${rel_ws}"
        _get_confirm "Set workspace to your working path ${rel_ws}? [y/N]"
        if [[ ${confirm} -eq 1 ]]; then
            HR_WORKSPACE=${rel_ws}
            set_env
        fi
    fi
}

#######

show_help() {
cat << EOF
Usage: $0 OPTION

-i      Install dependencies.
-g      Get HR source code.
-u      Update HR source code.
-b      Build HR source code.
-t      Run tests.
-w      Set Hanson Robotics workspace.
-p      Print Hanson Robotics workspace.
-r      Run custom functions.
-c      Clean up files.
-h      Print this help.
-s      Build a single package specified.
-P      Build package.
-y      Assume yes to all queries and don't prompt.

EOF
}

parse_opts() {
    while getopts ":hw:igGbBuUvtpr:s:dcmPy" opt; do
        case $opt in
        h)
            show_help
            exit 0
            ;;
        w) HR_WORKSPACE=$OPTARG ;;
        i) INSTALL_DEPENDENCIES=1 ;;
        g) GET_HR_SOURCE_CODE=1 ;;
        b) BUILD_HR_SOURCE_CODE=1 ;;
        u) UPDATE_HR_SOURCE_CODE=1 ;;
        t) RUN_TESTS=1 ;;
        p) PRINT_HR_WORKSPACE=1 ;;
        s) BUILD_SINGLE_PKG=1  && CUSTOM_FUNCTIONS=$OPTARG ;;
        r) RUN_CUSTOM_FUNCTIONS=1 && CUSTOM_FUNCTIONS=$OPTARG && break ;;
        c) CLEANUP=1 ;;
        P) BUILD_PACKAGE=1 ;;
        y) ASSUME_YES=1 ;;
        \?)
            error "Invalid option: -$OPTARG" >&2
            show_help
            exit 1
            ;;
        :)
            error "Option -$OPTARG requires an argument." >&2
            show_help
            exit 1
            ;;
        esac
    done
    shift $((OPTIND-1))
    CUSTOM_FUNCTIONS_ARGS=$@
}

set_ws() {
    if [[ -z $HR_WORKSPACE ]]; then
        if [[ -f $HR_ENVFILE_PATH ]]; then
            local str=$(cat $HR_ENVFILE_PATH|grep "export HR_WORKSPACE=")
            if [[ -z $str ]]; then
                error "HR_WORKSPACE is not found in $HR_ENVFILE_PATH"
                local confirm
                _get_confirm "Do you want to reset to default ${DEFAULT_HR_WORKSPACE}? [y/N]"
                [[ ${confirm} -eq 1 ]] || exit 0
                HR_WORKSPACE=$DEFAULT_HR_WORKSPACE
            else
                HR_WORKSPACE=${str#export HR_WORKSPACE=}
            fi
        else
            HR_WORKSPACE=$DEFAULT_HR_WORKSPACE
        fi
    fi
    if [[ ! "$HR_WORKSPACE" = /* ]]; then
        HR_WORKSPACE=$(pwd)/$HR_WORKSPACE
    fi
    check_or_create_ws $HR_WORKSPACE
    if [[ ! -d $HR_WORKSPACE ]]; then
        error "HR_WORKSPACE is incorrect, exit"
        exit 1;
    fi
    if [[ ! -d $(dirname $HR_ENVFILE_PATH) ]]; then mkdir -p $(dirname $HR_ENVFILE_PATH); fi
    if [[ $HR_WORKSPACE != '/' ]]; then
        HR_WORKSPACE=${HR_WORKSPACE%/}
    fi
    echo export HR_WORKSPACE=$HR_WORKSPACE > $HR_ENVFILE_PATH
    export HR_WORKSPACE=$HR_WORKSPACE
}

set_env() {
    set_ws
cat <<EOF >>$HR_ENVFILE_PATH
export HR_VERSION=$HR_VERSION
export HR_ENVFILE_PATH=$HR_ENVFILE_PATH
export HR_PREFIX=$HR_PREFIX
export HR_CACHE=$HR_CACHE
export MARKY_MARKOV_DIR=$MARKY_MARKOV_DIR
export HR_MODELS=$HR_MODELS
export ROS_LOG_DIR="$HOME/.hr/log"
export PYTHONPATH=$PYTHONPATH:/dist
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export LIBRARY_PATH=$LIBRARY_PATH
export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH
EOF
    cp $HR_ENVFILE_PATH $BASEDIR >/dev/null 2>&1 # For compatibility
}

_change_remote() {
    repo_url=$1
    branch=$2
    git remote remove old 2>&1 1>/dev/null || true
    git remote rename origin old
    git remote add -f origin $repo_url
    git branch $branch -u origin/$branch
    git reset --hard origin/$branch
}

do_build_package() {
    info "Building DEB package"
    # sudo apt-get ${APT_GET_OPTS} install packaging-dev
    local archive="head-${HR_VERSION}.tar.gz"
    local build_dir=$HR_WORKSPACE/build-area
    local workspace=${build_dir}/head-${HR_VERSION}
    info "Build directory ${build_dir}"
    cd $HR_WORKSPACE/$PROJECT
    git archive --format=tar.gz --prefix=head-${HR_VERSION}/ HEAD > $archive
    if [[ -d $workspace ]]; then
        rm -r $workspace
    fi
    mkdir -p ${build_dir}
    tar zxf $archive -C ${build_dir}
    cd $workspace

    install_target=$workspace/install/lib/python2.7/dist-packages/
cat <<EOF > _build.sh
#!/usr/bin/env bash
set -e
source /opt/ros/indigo/setup.bash
catkin init
catkin build -c -j$(nproc) --make-args install
pip2 install -t $install_target $workspace/src/hardware/pololu-motors --upgrade --no-deps
pip3 install -t $install_target $workspace/src/blender_api_msgs --upgrade --no-deps
EOF

cat <<EOF > _clean.sh
#!/usr/bin/env bash
set -e
catkin init
catkin clean -y || true
rm -rf .catkin_tools
rm -f $workspace/scripts/env.sh
EOF

    dh_make --yes --single --createorig || true
    dpkg-buildpackage -b
}

execute() {
    parse_opts $@
    set_env

    if [[ $DEVELOPER_MODE == 1 ||
        $UPDATE_HR_SOURCE_CODE == 1 ||
        $BUILD_HR_SOURCE_CODE == 1 ||
        $RUN_CUSTOM_FUNCTIONS == 1 ||
        $GET_HR_SOURCE_CODE == 1 ||
        $BUILD_PACKAGE == 1
        ]]; then
        if [[ $ASSUME_YES == 0 ]] ; then
            check_ws
        fi
    fi
    if [[ $INSTALL_DEPENDENCIES ]]; then timeit do_install_deps; fi
    if [[ $GET_HR_SOURCE_CODE ]]; then timeit do_get_hr_src; fi
    if [[ $DEVELOPER_MODE ]]; then timeit do_dev_mode ; fi
    if [[ $UPDATE_HR_SOURCE_CODE ]]; then timeit do_update_hr ; fi
    if [[ $CLEANUP ]]; then timeit do_clean_up ; fi
    if [[ $BUILD_HR_SOURCE_CODE ]]; then timeit do_build_hr; fi
    if [[ $RUN_TESTS ]]; then timeit do_test; fi
    if [[ $PRINT_HR_WORKSPACE ]]; then echo HR_WORKSPACE=$HR_WORKSPACE ; fi
    if [[ $BUILD_SINGLE_PKG ]]; then timeit do_single_package $CUSTOM_FUNCTIONS ; fi
    if [[ $RUN_CUSTOM_FUNCTIONS ]]; then timeit $CUSTOM_FUNCTIONS $CUSTOM_FUNCTIONS_ARGS; fi
    if [[ $BUILD_PACKAGE ]]; then timeit do_build_package ; fi
}

### Main ###

if [[ ! $(lsb_release --codename --short) == "trusty" ]]; then
    error "Error: Only Ubuntu 14.04 (trusty) is supported" >&2
    exit 1
fi

for i in $(env|grep ROS|cut -d= -f1); do
    unset $i
done
unset HR_WORKSPACE

for d in $HR_CACHE $APT_CACHE_DIR $PIP_CACHE_DIR; do
    if [[ ! -d ${d} ]]; then
        info "Creating ${d}"
        mkdir -p ${d}
    fi
done

if [[ ! $BASH_SOURCE == $0 ]]; then return; fi

if [ $# -eq 0 ] ; then show_help; exit 0; fi

execute $@
